import java.nio.channels.Channels
import java.nio.channels.ReadableByteChannel
import java.nio.file.Files
import java.nio.file.*
import org.apache.commons.lang3.SystemUtils
import java.nio.file.StandardCopyOption

group 'com.freddyt_studio.remotekey_desktop'
version '0.6.0'  // Human readable version
int version_number = 8  // An integer that must be incremented at each release
int minimum_mobile_version = 3 // Minimum dokey mobile version that this Desktop support

buildscript {
    ext.kotlin_version = '1.1.61'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

// Remove the image directories from the JAR, because they will
// be included outside the jar
sourceSets.main.resources.excludes = ["/sicons", "/webicons", "/win", "/mac", "/commands"]

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'net.java.dev.jna:jna:4.5.0'
    compile 'net.java.dev.jna:jna-platform:4.5.0'
    compile 'org.jsoup:jsoup:1.11.2'
    compile 'com.github.tulskiy:jkeymaster:1.2'
    compile 'com.udojava:EvalEx:2.0'
    compile 'org.reflections:reflections:0.9.11'
    compile group: 'com.google.zxing', name: 'core', version: '3.3.3'
    compile group: 'com.google.zxing', name: 'javase', version: '3.3.3'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile "io.reactivex.rxjava2:rxjava:2.1.9"
    compile 'org.springframework:spring-context:5.0.4.RELEASE'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    testCompile 'org.mockito:mockito-core:2.7.22'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

private <T> T osSpecific(T win, T mac) {
    if (SystemUtils.IS_OS_WINDOWS)
    {
        return win
    }
    if (SystemUtils.IS_OS_MAC)
    {
        return mac
    }
    throw new RuntimeException('Unknown OS')
}

// Used to produce project info properties file
task('produceProjInfo') {
    Path outProduction = projectDir.toPath().resolve("src/main/resources")
    File propertiesFile = new File(new File(outProduction.toAbsolutePath().toString()), "proj.properties")
    Properties properties = new Properties();
    properties.put("version", project.version)
    properties.put("vnumber", String.valueOf(version_number))
    properties.put("minimum_mobile_version", String.valueOf(minimum_mobile_version))
    properties.store(new FileOutputStream(propertiesFile), null)
}

build.dependsOn produceProjInfo

// NATIVE COPY OS SPECIFIC FILES
Path additionalFilesBuildDir = buildDir.toPath().resolve('jfx-additional-files')
task('copyAdditionalFilesNative', type: Sync) {
    from projectDir.toPath().resolve("src/main/resources/")
    // Skip the directories of other OS
    if (SystemUtils.IS_OS_WINDOWS) {
        exclude("**/mac/**")
    }else if (SystemUtils.IS_OS_MAC) {
        exclude("**/win/**")
    }
    into additionalFilesBuildDir
}

jar {
    manifest {
        attributes(
                'Main-Class': 'app.MainLauncher'
        )
    }
}

//jfxNative.dependsOn copyAdditionalFilesNative
//jfxRun.dependsOn copyAdditionalFilesNative
//
//// configure javafx-gradle-plugin
//// for all available settings please look at the class "JavaFXGradlePluginExtension"
//jfx {
//    verbose = true
//    mainClass = "app.MainLauncher"
//
//    appName = "Dokey"
//    vendor = "Dokey"
//    nativeReleaseVersion = project.version.toString()
//    identifier = "com.rocketguys.dokey"
//
//    updateExistingJar = true
//    additionalAppResources = additionalFilesBuildDir.toAbsolutePath().toString()
//    copyAdditionalAppResourcesToJar = true
//}

// Uncomment these to include the resources in the jar
//sourceSets.main.resources.srcDirs = [ "src/main/resources/" ]
//sourceSets.main.resources.includes = ["**/*"]


task updateRemoteConnectDependency() {
    ext.repositoryUrl = "http://federicoterzi.com/remotekey-connect/"

    doLast {
        // Get the current jar filename
        def currentJarFilename = new URL(repositoryUrl+"/current.txt").getText()
        println "Repository version: "+currentJarFilename

        // Make sure the project version is updated
        def checkFile = new File("libs/"+currentJarFilename)
        if (checkFile.isFile()) {
            println "Project JAR is already updated."
        }else{
            println "Updating project JAR..."
            // Download the JAR file
            URL jarURL = new URL(repositoryUrl+currentJarFilename)
            InputStream i = jarURL.openStream()
            def fout = new FileOutputStream(new File("libs/"+currentJarFilename))
            Files.copy(i, fout)
            fout.close()
        }
    }
}