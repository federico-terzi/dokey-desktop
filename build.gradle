import java.nio.channels.Channels
import java.nio.channels.ReadableByteChannel
import java.nio.file.Files
import java.nio.file.Path
import org.apache.commons.lang3.SystemUtils
import java.nio.file.StandardCopyOption

group 'com.freddyt_studio.remotekey_desktop'
version '0.1'

buildscript {
    ext.kotlin_version = '1.1.61'

    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'javafx-gradle-plugin'

sourceCompatibility = 1.8

// Remove the image directories from the JAR, because they will
// be included outside the jar
sourceSets.main.resources.excludes = ["/icons", "/sicons", "/sysicons", "/webicons"]

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'net.java.dev.jna:jna:4.5.0'
    compile 'net.java.dev.jna:jna-platform:4.5.0'
    compile 'org.jsoup:jsoup:1.11.2'
    compile "io.reactivex.rxjava2:rxjava:2.1.9"
    compile 'org.springframework:spring-context:5.0.4.RELEASE'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    testCompile 'org.mockito:mockito-core:2.7.22'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task updateRemoteConnectDependency() {
    ext.repositoryUrl = "http://federicoterzi.com/remotekey-connect/"

    doLast {
        // Get the current jar filename
        def currentJarFilename = new URL(repositoryUrl+"/current.txt").getText()
        println "Repository version: "+currentJarFilename

        // Make sure the project version is updated
        def checkFile = new File("libs/"+currentJarFilename)
        if (checkFile.isFile()) {
            println "Project JAR is already updated."
        }else{
            println "Updating project JAR..."
            // Download the JAR file
            URL jarURL = new URL(repositoryUrl+currentJarFilename)
            InputStream i = jarURL.openStream()
            def fout = new FileOutputStream(new File("libs/"+currentJarFilename))
            Files.copy(i, fout)
            fout.close()
        }
    }
}

private <T> T osSpecific(T win, T mac) {
    if (SystemUtils.IS_OS_WINDOWS)
    {
        return win
    }
    if (SystemUtils.IS_OS_MAC)
    {
        return mac
    }
    throw new RuntimeException('Unknown OS')
}

task('copyAdditionalFiles', type: Sync) {
    Path outProduction = projectDir.toPath().resolve("out/production/resources")

    Path additionalFilesSources = projectDir.toPath()
            .resolve('src/main/os-resources/')

    from additionalFilesSources.resolve(osSpecific('win', 'mac'))
    into outProduction

    from projectDir.toPath().resolve("src/main/resources/")
    into outProduction
}

build.dependsOn copyAdditionalFiles

// NATIVE COPY OS SPECIFIC FILES
Path additionalFilesBuildDir = buildDir.toPath().resolve('jfx-additional-files')
task('copyAdditionalFilesNative', type: Sync) {
    Path additionalFilesSources = projectDir.toPath()
            .resolve('src/main/os-resources/')

    from additionalFilesSources.resolve(osSpecific('win', 'mac'))
    into additionalFilesBuildDir

    from projectDir.toPath().resolve("src/main/resources/")
    into additionalFilesBuildDir
}
jfxNative.dependsOn copyAdditionalFilesNative
jfxRun.dependsOn copyAdditionalFilesNative

// configure javafx-gradle-plugin
// for all available settings please look at the class "JavaFXGradlePluginExtension"
jfx {
    verbose = true
    mainClass = "app.MainApp"

    appName = "Dokey"
    vendor = "Rocket Guys"
    nativeReleaseVersion = "0.1"
    identifier = "com.rocketguys.dokey"

    updateExistingJar = true
    additionalAppResources = additionalFilesBuildDir.toAbsolutePath().toString()
    copyAdditionalAppResourcesToJar = true
}

// Uncomment these to include the resources in the jar
//sourceSets.main.resources.srcDirs = [ "src/main/resources/" ]
//sourceSets.main.resources.includes = ["**/*"]